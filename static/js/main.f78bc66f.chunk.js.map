{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","t","getUser","userId","usersFromServer","find","App","useState","titleTodo","setTitleTodo","allTodos","setAllTodos","selectedUserId","setSelectedUserId","largestId","Math","max","titleError","userError","errorMessage","setErrorMessage","handleSubmit","event","preventDefault","errors","isError","validation","newTodo","oldArr","action","method","onSubmit","htmlFor","type","placeholder","value","onChange","RegExp","test","target","handleInputChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,uBCpDEC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKF,OAA7C,SACGE,EAAKJ,QCAGO,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,UACAN,EAEEI,EAFFJ,KACAL,EACES,EADFT,GAGF,OACE,0BACEM,UAAWM,IAAW,WAAY,CAChC,sBAAuBD,IAEzB,UAASX,EAJX,UAME,oBAAIM,UAAU,kBAAd,SACGI,IAEFL,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QCnBlBQ,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,oBAAIR,UAAU,WAAd,SAEIQ,EAAMC,KAAI,SAAAC,GAAC,OACT,6BACE,cAAC,EAAD,CAAUP,KAAMO,KADTA,EAAEhB,UCGnB,SAASiB,EAAQC,GAGf,OAFkBC,EAAgBC,MAAK,SAAAf,GAAI,OAAIA,EAAKL,KAAOkB,MAEvC,KAGf,IAAMJ,ECrBE,CACb,CACEd,GAAI,EACJU,MAAO,qBACPC,WAAW,EACXO,OAAQ,GAEV,CACElB,GAAI,GACJU,MAAO,kBACPC,WAAW,EACXO,OAAQ,GAEV,CACElB,GAAI,EACJU,MAAO,qCACPC,WAAW,EACXO,OAAQ,IDIiCH,KAAI,SAAAN,GAAI,kCAChDA,GADgD,IAEnDJ,KAAMY,EAAQR,EAAKS,aAGRG,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAASR,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAA4CJ,mBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACMC,EAAYC,KAAKC,IAAL,MAAAD,KAAI,YAAQL,EAASV,KAAI,SAAAN,GAAI,OAAIA,EAAKT,QACxD,EAAwCsB,mBAAS,CAC/CU,WAAY,GACZC,UAAW,KAFb,mBAAOC,EAAP,KAAqBC,EAArB,KAiCMC,EAAe,SAACC,GAGpB,GAFAA,EAAMC,kBA9BW,WACjB,IAAMC,EAAuB,CAC3BP,WAAY,GACZC,UAAW,IAETO,GAAU,EAgBd,OAdKjB,IACHgB,EAAOP,WAAa,uBACpBQ,GAAU,GAGW,IAAnBb,IACFY,EAAON,UAAY,uBACnBO,GAAU,GAGRA,GACFL,EAAgBI,GAGXC,EAWHC,GAAJ,CAIA,IAAMC,EAAgB,CACpB1C,GAAI6B,EAAY,EAChBnB,MAAOa,EACPZ,WAAW,EACXO,OAAQS,EACRtB,KAAMY,EAAQU,IAGhBD,GAAY,SAAAiB,GAAM,4BAAQA,GAAR,CAAgBD,OAnBlClB,EAAa,IACbI,EAAkB,KAmCpB,OACE,sBAAKtB,UAAU,MAAf,UACE,+CAEA,uBACEsC,OAAO,aACPC,OAAO,OACPvC,UAAU,OACVwC,SAAU,SAAAT,GAAK,OAAID,EAAaC,IAJlC,UAME,sBAAK/B,UAAU,QAAf,UACE,uBAAOA,UAAU,YAAYyC,QAAQ,UAArC,qBACA,uBACE/C,GAAG,UACHgD,KAAK,OACL/C,KAAK,YACL,UAAQ,aACRgD,YAAY,gBACZC,MAAO3B,EACP4B,SAAU,SAAAd,GAAK,OAhCC,SAACA,GACX,IAAIe,OAAO,8CAEdC,KAAKhB,EAAMiB,OAAOJ,SAI7B1B,EAAaa,EAAMiB,OAAOJ,OACtB3B,IAAcc,EAAMiB,OAAOJ,QAC7BhB,EAAaF,WAAa,KAuBDuB,CAAkBlB,MAEvC,sBACE/B,UAAU,QADZ,SAGG4B,EAAaF,gBAGlB,sBAAK1B,UAAU,QAAf,UACE,uBAAOA,UAAU,YAAYyC,QAAQ,SAArC,oBACA,yBACE,UAAQ,aACRG,MAAOvB,EACPwB,SAAU,SAAAd,GACRT,GAAmBS,EAAMiB,OAAOJ,OAC5BvB,KAAoBU,EAAMiB,OAAOJ,QACnChB,EAAaD,UAAY,KAN/B,UAUE,wBAAQjC,GAAG,SAASkD,MAAO,EAAGM,UAAQ,EAAtC,2BAEErC,EAAgBJ,KAAI,SAACV,GAAD,OAClB,wBACEL,GAAG,SAEHkD,MAAO7C,EAAKL,GAHd,SAKGK,EAAKJ,MAHDI,EAAKL,UASlB,sBACEM,UAAU,QADZ,SAGG4B,EAAaD,eAIlB,wBACEe,KAAK,SACL,UAAQ,eACR1C,UAAU,eAHZ,oBASF,cAAC,EAAD,CAAUQ,MAAOW,QElKvBgC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f78bc66f.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n    id,\n  } = todo;\n\n  return (\n    <article\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n      data-id={id}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"TodoList\">\n    {\n      todos.map(t => (\n        <li key={t.id}>\n          <TodoInfo todo={t} />\n        </li>\n      ))\n    }\n  </ul>\n);\n","import './App.scss';\nimport React, { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\ntype ErrorMessage = {\n  titleError: string,\n  userError: string,\n};\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [titleTodo, setTitleTodo] = useState('');\n  const [allTodos, setAllTodos] = useState(todos);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const largestId = Math.max(...allTodos.map(todo => todo.id));\n  const [errorMessage, setErrorMessage] = useState({\n    titleError: '',\n    userError: '',\n  });\n  const validation = () => {\n    const errors: ErrorMessage = {\n      titleError: '',\n      userError: '',\n    };\n    let isError = false;\n\n    if (!titleTodo) {\n      errors.titleError = 'Please enter a title';\n      isError = true;\n    }\n\n    if (selectedUserId === 0) {\n      errors.userError = 'Please choose a user';\n      isError = true;\n    }\n\n    if (isError) {\n      setErrorMessage(errors);\n    }\n\n    return isError;\n  };\n\n  const clearForm = () => {\n    setTitleTodo('');\n    setSelectedUserId(0);\n  };\n\n  const handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    if (validation()) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: largestId + 1,\n      title: titleTodo,\n      completed: false,\n      userId: selectedUserId,\n      user: getUser(selectedUserId),\n    };\n\n    setAllTodos(oldArr => [...oldArr, newTodo]);\n    clearForm();\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const regex = new RegExp(/^[a-zA-Z0-9А-Яа-я\\s]*$/);\n\n    if (!regex.test(event.target.value)) {\n      return;\n    }\n\n    setTitleTodo(event.target.value);\n    if (titleTodo !== event.target.value) {\n      errorMessage.titleError = '';\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        className=\"form\"\n        onSubmit={event => handleSubmit(event)}\n      >\n        <div className=\"field\">\n          <label className=\"formField\" htmlFor=\"titleId\">Title: </label>\n          <input\n            id=\"titleId\"\n            type=\"text\"\n            name=\"titleTodo\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={titleTodo}\n            onChange={event => handleInputChange(event)}\n          />\n          <span\n            className=\"error\"\n          >\n            {errorMessage.titleError}\n          </span>\n        </div>\n        <div className=\"field\">\n          <label className=\"formField\" htmlFor=\"userId\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={event => {\n              setSelectedUserId(+event.target.value);\n              if (selectedUserId !== +event.target.value) {\n                errorMessage.userError = '';\n              }\n            }}\n          >\n            <option id=\"userId\" value={0} disabled>Choose a user</option>\n            {\n              usersFromServer.map((user: User) => (\n                <option\n                  id=\"userId\"\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))\n            }\n          </select>\n\n          <span\n            className=\"error\"\n          >\n            {errorMessage.userError}\n          </span>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={allTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}